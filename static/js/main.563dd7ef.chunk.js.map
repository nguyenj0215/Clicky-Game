{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/ImageCards.js","App.js","serviceWorker.js","index.js"],"names":["NavTab","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","target","active","JumbotronBox","Jumbotron","high","count","ImageCards","src","image","alt","handleIncrement","id","App","state","characters","cardId","find","character","el","chosen","setState","shuffleCharacters","newGame","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","forEach","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uXA+BeA,EApBA,SAACC,GAAW,IAAD,EACMC,oBAAS,GADf,mBACfC,EADe,KACPC,EADO,KAKtB,OACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC7B,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,eACA,kBAACC,EAAA,EAAD,CAAeC,QALR,kBAAMR,GAAWD,MAMxB,kBAACU,EAAA,EAAD,CAAUV,OAAQA,EAAQW,QAAM,GAC5B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC3B,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,6CAA6CS,OAAO,SAASC,QAAM,GAAjF,e,QCPTC,EAbM,SAACpB,GAClB,OACI,kBAACqB,EAAA,EAAD,CAAWN,UAAU,aACjB,wBAAIA,UAAU,4BAAd,8BACA,uBAAGA,UAAU,6BAAb,2EACA,wBAAIA,UAAU,SACd,uBAAGA,UAAU,eAAb,eAAwCf,EAAMsB,MAC9C,uBAAGP,UAAU,gBAAb,kBAA4Cf,EAAMuB,S,MCC/CC,MARf,SAAoBxB,GAChB,OACI,yBAAKe,UAAU,QACX,yBAAKA,UAAU,YAAYU,IAAKzB,EAAM0B,MAAOC,IAAI,WAAWhB,QAAS,kBAAMX,EAAM4B,gBAAgB5B,EAAM6B,S,OC6EpGC,E,2MA1EbC,MAAQ,CACNC,aAEAT,MAAO,EAEPD,KAAM,G,EAGRM,gBAAkB,SAACK,GAEjB,EAAKF,MAAMC,WAAWE,MAAK,SAACC,EAAWC,GAErC,GAAID,EAAUN,KAAOI,EAAQ,CAE3B,IAA8B,IAA1BD,EAAWI,GAAIC,OAIjB,OAHA,EAAKC,SAAS,CAAEf,MAAO,EAAKQ,MAAMR,MAAQ,IAC1CS,EAAWI,GAAIC,QAAS,EACxB,EAAKE,kBAAkBP,IAChB,EAIP,EAAKQ,e,EAMbD,kBAAoB,SAAAE,GAIlB,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,G,EAETD,QAAU,WASR,OAPI,EAAKT,MAAMT,KAAO,EAAKS,MAAMR,OAC/B,EAAKe,SAAS,CAAEhB,KAAM,EAAKS,MAAMR,QAGnC,EAAKQ,MAAMC,WAAWiB,SAAQ,SAAAd,GAAS,OAAIA,EAAUE,QAAS,KAE9D,EAAKC,SAAS,CAAEf,MAAO,KAChB,G,wEAIC,IAAD,OACP,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcQ,MAAO2B,KAAKnB,MAAMR,MAAOD,KAAM4B,KAAKnB,MAAMT,OACvD4B,KAAKnB,MAAMC,WAAWmB,KAAI,SAAAhB,GAAS,OAClC,kBAAC,EAAD,CACET,MAAOS,EAAUT,MACjB0B,IAAKjB,EAAUN,GACfA,GAAIM,EAAUN,GACdD,gBAAiB,EAAKA,0B,GApEhByB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.563dd7ef.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n} from 'reactstrap';\n\nconst NavTab = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand href=\"/\">Clicky Game</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <NavLink href=\"https://github.com/nguyenj0215/clicky-game\" target=\"_blank\" active>GitHub</NavLink>\n                    </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>\n    );\n}\n\nexport default NavTab;","import React from 'react';\nimport { Jumbotron} from 'reactstrap';\n\nconst JumbotronBox = (props) => {\n    return (\n        <Jumbotron className=\"jumbotron\">\n            <h1 className=\"display-3 jumbotronTitle\">Clicky Game - NFL Edition!</h1>\n            <p className=\"lead jumbotronDescription\">Click on an image to earn points but don't click on any more than once!</p>\n            <hr className=\"my-2\" />\n            <p className=\"highDisplay\">High score: {props.high}</p>\n            <p className=\"countDisplay\">Current score: {props.count}</p>\n        </Jumbotron>\n\n    );\n};\n\nexport default JumbotronBox;","import React from 'react';\nimport \"./style.css\";\n\nfunction ImageCards(props) {\n    return (\n        <div className=\"card\">\n            <img className=\"cardImage\" src={props.image} alt=\"Card Pic\" onClick={() => props.handleIncrement(props.id)}></img>\n        </div>\n    )\n}\n\nexport default ImageCards;","import React, { Component } from \"react\";\nimport './App.css';\nimport NavTab from './components/Navbar';\nimport JumbotronBox from './components/Jumbotron';\nimport ImageCards from './components/ImageCards';\nimport characters from \"./images.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    characters,\n    //count for current round score\n    count: 0,\n    //current highest score\n    high: 0\n  };\n\n  handleIncrement = (cardId) => {\n    //Loop through characters array\n    this.state.characters.find((character, el) => {\n      //Find id of image clicked \n      if (character.id === cardId) {\n        //If it has not been clicked: set chosen true, count+1, shuffle\n        if (characters[el].chosen === false) {\n          this.setState({ count: this.state.count + 1 });\n          characters[el].chosen = true;\n          this.shuffleCharacters(characters);\n          return true;\n        }\n        //If it has been clicked: new game\n        else {\n          this.newGame();\n        }\n      }\n    });\n  };\n\n  shuffleCharacters = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  newGame = () => {\n    // check if their score is highest than current saved high score\n    if (this.state.high < this.state.count) {\n      this.setState({ high: this.state.count })\n    }\n    // set all heroes.clicked = false\n    this.state.characters.forEach(character => character.chosen = false)\n    // set count back to 0 \n    this.setState({ count: 0 });\n    return true;\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div className=\"App\">\n        <NavTab />\n        <JumbotronBox count={this.state.count} high={this.state.high}/>\n        {this.state.characters.map(character => (\n          <ImageCards\n            image={character.image}\n            key={character.id}\n            id={character.id}\n            handleIncrement={this.handleIncrement}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}